h5py is a python module which allow you to easily use the HDF5 format
from python. [[http://www.hdfgroup.org/HDF5/][HDF5]] is a powerful
format which supports compression and parallel I/O. Installing h5py from
source was not a piece of cake. I show here the easy and fast way. As a
souvenir, I also show the manual way, which is to be avoided.

#+begin_html
  <!--more-->
#+end_html

** The easy way
   :PROPERTIES:
   :CUSTOM_ID: the-easy-way
   :END:
Use [[https://pypi.python.org/pypi/pip][pip]], a package manager for
python ! The issues mentioned below (i.e a custom MPI path) can be
solved with :

#+begin_src shell
  $ CFLAGS="-I/usr/lib/openmpi/include/" pip install h5py
#+end_src

If you have HDF5 in a non-standard location, for example in
/HDF5_folder, use instead:

#+begin_src shell
  $ CFLAGS="-I/usr/lib/openmpi/include/ -I/HDF5_folder/include" LDFLAGS=-L/HDF5_folder/lib" pip install h5py
#+end_src

To install HDF5, see
[[file:%7B%%20post_url%202014-07-26-hdf5-netcdf%20%%7D][this post]].

** The painful way
   :PROPERTIES:
   :CUSTOM_ID: the-painful-way
   :END:
Okay, let's download the source for h5py and compile it. HDF5 is already
installed so it should be easy as python setup.py install, right ?

#+begin_src shell
  $ python setup.py build
  /usr/local/include/H5public.h:61:20: fatal error: mpi.h: 
  No such file or directory  
#+end_src

It cannot find the MPI header files. No problem, we just need to update
the compiler include flags. Turns out, it is not so easy:

#+begin_src shell
  $ python setup.py build --include-dirs=/usr/lib/openmpi/include/
  error: option --include-dirs not recognized  
#+end_src

After searching 10min on the Internet, I finally find it:

#+begin_src shell
  $ python setup.py build_ext --include-dirs=/usr/lib/openmpi/include/ 
#+end_src

Some compilation later, the module fails to link:

#+begin_src shell
  /usr/bin/ld: /usr/local/lib/libhdf5.a(H5.o): relocation 
  R_X86_64_32 against `.rodata.str1.1' can not be used when
  making a shared object; recompile with -fPIC
  libhdf5.a: could not read symbols: Bad value
#+end_src

Now, what does this even mean ?? After looking into the installation
folder, I realize only the static libraries have been installed from
HDF5. Let's try to reinstall HDF5 both shared and static libraries. This
should solve the issue:

#+begin_src shell
  $ ./configure --enable-fortran --enable-parallel --prefix=/usr/local --enable-shared --enable-static
#+end_src

It is a very bad idea, the compiler spurts a lot of not-so-nice messages
at me. Now, let's try to install only the shared version of HDF5:

#+begin_src shell
  $ ./configure --enable-fortran --enable-parallel --prefix=/usr/local --enable-shared 
  $ make
#+end_src

It compiles ! Now, we just remove the old files and install HDF5
properly. Even better, h5py is happy this thime and install itself
properly with:

#+begin_src shell
  $ python setup.py build_ext --include-dirs=/usr/lib/openmpi/include/
  $ python setup.py install
#+end_src

Finally, we can try loading the module in python:

#+begin_src python
      >>> import h5py
      Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File "/usr/local/lib/python2.7/dist-packages/h5py-2.3.0-py2.7-linux-x86_64.egg/h5py/__init__.py",
        line 10, in <module>
            from h5py import _errors
            ImportError: libhdf5.so.8: cannot open shared object
            file: No such file or directory
#+end_src

The library is not found so let us add it to the proper variable:

#+begin_src shell
  $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib 
#+end_src

And now it works ! It was not that straightforward though.

** Other possible error
   :PROPERTIES:
   :CUSTOM_ID: other-possible-error
   :END:
Installing it on a Fedora machine, I got:

#+begin_src python
      >>> import h5py
      Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
          File "h5py/__init__.py", line 10, in <module>
              from h5py import _errors
              ImportError: cannot import name _errors
#+end_src

It happens when you try to import h5py from the source directory. Change
to another directory and try again.
